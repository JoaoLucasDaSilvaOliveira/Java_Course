-> Imagine que você tem uma classe abstrata Veículo com um método, também abstrato, dirigir(). Essa classe pode ser
extendida por outras, como Carro, Moto e etc. Mas e se eu extender uma classe Cadeira, vai funcionar! Pensando nisso,
foram criadas as sealed classes.
->Interfaces também podem ser sealed;
Notação:
-> super classe:
                                       //é necessário passar uma lista de quem pode herdar a classe
    public abstract sealed class Veiculo permits Carro, Moto {
        public abstract void dirigir ();
    }

-> sub classes:

        //precisa ser final para garantir a integridade da superclasse
    public final class Carro extends Veiculo {
        public void dirigir (){
            System.out.println("Vrummm");
        }
    }

    public final class Moto extends Veiculo {
        public void dirigir (){
            System.out.println("Randandan");
        }
    }

-> caso tenha um "intruso" tentando herdar de uma classe sealed, o código não complila!
    Ex.: public final class Cadeira extends Veiculo {           //}--
        public void dirigir (){                                    //|
                    System.out.println("mmm");                     //|------- NÃO COMPLILA
                }                                                  //|
    }                                                           //}--

-OBS.: caso a classe queria permitir herança e herdam de uma classe sealed, é necessário o modificado non-sealed na classe;